%include "inc.asm"

init_param:
    stack_top      equ    0x7c00
	page_dir_base  equ    0x200000
	page_tbl_base  equ    0x201000

org 0x9000
jmp entry_seg 
; [section .gdt] start
[section .gdt]
; GDT_TAB                  start_addr     limit_addr         seg_property
GDT_ENTRY:    Descriptor      0,             0,                    0
CODE32_DESC:  Descriptor      0,         code32_len - 1,      DA_C | DA_32 | DA_DPL0
VIDEO_DESC:   Descriptor   0xB8000,       0x07FFF,            DA_DRWA | DA_32 | DA_DPL0
DATA32_DESC:  Descriptor      0,         data32_len-1,        DA_DRW  | DA_32 | DA_DPL0
STACK32_DESC: Descriptor      0,         stack32_limit,       DA_DRW | DA_32 | DA_DPL0
CODE16_DESC:  Descriptor      0,           0xFFFF,            DA_C | DA_DPL0 
UPDATE_DESC:  Descriptor      0,           0xFFFF,            DA_DRW | DA_DPL0
A_LDT_DESC:   Descriptor      0,        taska_ldt_len - 1,    DA_LDT | DA_DPL0       

FUNCTION_DESC:Descriptor      0,        function_len - 1,     DA_C | DA_32 | DA_DPL0

;Gate_descriptor
;call gate
;                                selector             offset            param_count          attribute
FUNC_CG_PRINT_DESC:    Gate   function_selector,     print_info_off,        0,             ( DA_386CGATE | DA_DPL3 )
;ACCE_KERNEL_DATA_DESC: Gate   function_selector,     acce_kernel_off,       0,             ( DA_386CGATE | DA_DPL3 )
SET_PAGE_UP_DESC       Gate   function_selector,     page_up_off,           0,             ( DA_386CGATE | DA_DPL3 )

;Tss_descriptor
;tss
TSS_DESC:     Descriptor      0,         tss_len - 1,         DA_386TSS | DA_32 | DA_DPL0

PAGE_DIR_DESC Descriptor    page_dir_base,   4095,           DA_DRW | DA_32
PAGE_TBL_DESC Descriptor    page_tbl_base,   1023,           DA_DRW | DA_LIMIT_4K | DA_32

GDT_LEN   equ      $ - GDT_ENTRY
;===========================================================================================================GDT end;

GDT_PTR: 
    dw GDT_LEN-1    ; gdt_max_offset
	dd  0           ; gdt_addr 



GDT_SELECTOR:       ; first not use.
    code32_selector    equ    ( (0x0001 << 3) | SA_TIG | SA_RPL0 )
    video_selector     equ    ( (0x0002 << 3) | SA_TIG | SA_RPL0 )
	data_selector      equ    ( (0x0003 << 3) | SA_TIG | SA_RPL0 )
	stack32_selector   equ    ( (0x0004 << 3) | SA_TIG | SA_RPL0 )
	code16_selector    equ    ( (0x0005 << 3) | SA_TIG | SA_RPL0 )
	update_selector    equ    ( (0x0006 << 3) | SA_TIG | SA_RPL0 )
	taska_ldt_selector equ    ( (0x0007 << 3) | SA_TIG | SA_RPL0 )
	function_selector  equ    ( (0x0008 << 3) | SA_TIG | SA_RPL0 )

;Gate selector defined:
    func_print_selector  equ    ( (0x0009 << 3) | SA_TIG | SA_RPL3 )
    ;func_acce_selector   equ    ( (0x000a << 3) | SA_TIG | SA_RPL3 )
func_setup_page_selector equ  ( (0x000a << 3) | SA_TIG | SA_RPL3 )
;tss selector
    tss_selector       equ     ( (0x000b << 3) | SA_TIG | SA_RPL0 )

;page table selector
    page_dir_selector  equ    ( (0x000c << 3) | SA_TIG | SA_RPL0 )
	page_tbl_selector  equ    ( (0x000d << 3) | SA_TIG | SA_RPL0 )

;end of [section .gdt]

;&&& ldt &&&
[section .task_a_ldt]
taska_ldt_start:
;LDT_TAB                              start_addr        limit_addr            seg_property
TASKA_CODE32_DESC:  Descriptor             0,       taska_code32_len-1,       DA_C | DA_32 | DA_DPL3
TASKA_DATA32_DESC:  Descriptor             0,       taska_data32_len-1,       DA_DRW | DA_32 | DA_DPL3
TASKA_STACK32_DESC: Descriptor             0,       taska_stack32_len-1,      DA_DRW | DA_32 | DA_DPL3

taska_ldt_len    equ      $-taska_ldt_start

;LDT end

TASKA_LDT_SELECTOR:
    taska_code32_selector     equ        ( (0x0000<<3) | SA_TIL | SA_RPL3 )
    taska_data32_selector     equ        ( (0x0001<<3) | SA_TIL | SA_RPL3 ) ;RPL3 can't access kernel data
    taska_stack32_selector    equ        ( (0x0002<<3) | SA_TIL | SA_RPL3 )


[section .s16]
[bits 16]
entry_seg:

mov ax, cs
mov ds, ax
mov es, ax
mov ss, ax

mov [ret_to_real + 3], ax

mov sp, stack_top

; init GDT for 32bits seg

mov esi, code32_seg_start
mov edi, CODE32_DESC
call init_descriptor_item

mov esi, stack32_start
mov edi, STACK32_DESC
call init_descriptor_item

mov esi, data32_start
mov edi, DATA32_DESC
call init_descriptor_item

mov esi, code16_start
mov edi, CODE16_DESC
call init_descriptor_item

mov esi, taska_ldt_start
mov edi, A_LDT_DESC
call init_descriptor_item

mov esi, taska_code_start
mov edi, TASKA_CODE32_DESC
call init_descriptor_item

mov esi, taska_data_start
mov edi, TASKA_DATA32_DESC
call init_descriptor_item

mov esi, taska_stack_start
mov edi, TASKA_STACK32_DESC
call init_descriptor_item

mov esi, function_seg_start
mov edi, FUNCTION_DESC
call init_descriptor_item

mov esi, tss_start
mov edi, TSS_DESC
call init_descriptor_item

; init gdt struct
xor eax, eax
mov ax, ds
add eax, GDT_ENTRY
mov dword [GDT_PTR + 2], eax

;1. load gdt
lgdt [GDT_PTR]
;2. cli 
cli
;3. open A20
in al, 0x92
or al, 0x02
out 0x92, al
;protect open
mov eax, cr0
or eax, 0x01
mov cr0, eax
;jump 32nits code , use descriptor 1 
;jmp dword code32_selector : 0
;push stack32_selector
;push stack32_limit
push code32_selector
push 0x0000
retf


RET_ENTRY:
    mov ax, cs
	mov ds, ax
	mov es, ax
	mov ss, ax
	mov sp, stack_top
    
    in al, 0x92
    and al, 0xfd
    out 0x92, al  
    sti

    mov bp, str_test
    mov cx, 0x0c
    mov dx, 0x1400
    mov bx, 0x00f0
    mov ax, 0x1301
    int 0x10

    jmp $
;============ function =============;
; name: init_descriptor_item
; code seg label   -> ESI
; descriptor label -> EDI
init_descriptor_item:
    push eax

    xor eax, eax
	mov ax, cs
    shl eax, 4
	add eax, esi

	mov word [edi + 2], ax
	shr eax, 16 ;;;;;;;;;;;;;;;;;;;;;;E1
	mov byte [edi + 4], al
	;shr eax, 8
	mov byte [edi + 7], ah

    pop eax
    ret


[section .s16]
[bits 16]
code16_start:
    ; 1. flush segment register(cache)
	; 2. exit protect mode
    mov ax, update_selector
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	mov ss, ax

    mov eax, cr0
	and ax, 0xfffe
	mov cr0, eax

ret_to_real:
    jmp  0:RET_ENTRY

code16_len  equ    $-code16_start

; ************************* TSS *******************************
[section .tss]
[bits 32]
tss_start:
    dd 0
	; level 0 stack information
    dd stack32_limit
    dd stack32_selector
	; level 1
    dd 0
	dd 0
	; level 2
	dd 0
	dd 0

    ;register
	times 4*18 dd 0
	; ... ...
	dw 0
	dw $ - tss_start - 2
	;end tss struct flag
	db 0xff

tss_len    equ         $ - tss_start



;===========================  32_function =============================
[section .my_function]
[bits 32]
function_seg_start:

; name: print_info
; string end of '\0'
; src in --> (DS:ESI)
; attribute-> Bh
; row in  DH 
; cols in DL
print_info:
	push edi
	push eax
    push bx
	push dx

    mov eax, 80
	mul dh
	and dx, 0x00ff
	add ax, dx
	shl eax, 1 
	mov edi, eax

    mov ax, video_selector
	mov gs, ax
	xor ax, ax

	mov ah, bh
    
print_ainfo:
    mov al, byte [ds:esi]
	cmp al, 0
	je  end_print

    mov [gs:edi], ax ; print to show cache
	inc esi
	add edi, 2
    jmp print_ainfo

end_print:
    pop dx
	pop bx
    pop eax 
	pop edi
    retf
print_info_off  equ       print_info - $$


; name: acce_kernel_data
; ds:esicopy to es:edi
; patch: check ds rpl.
acce_kernel_data:
    ;push edi
    ;push eax
	;push ecx

    mov cx, word [esp + 4]
	mov ax, es
    or  ax, cx

	call check_rpl

	cld
    
	mov ax, data_selector
	mov ds, ax

	mov ecx, test_len 
    mov esi, str_offset 
	rep movsb


    ;pop ecx
    ;pop eax
    ;pop edi
    retf
acce_kernel_off  equ     acce_kernel_data - $$

; name: check_rpl
; arguments in  ax
check_rpl:
    push ax

    and ax, 0x03
	cmp ax, SA_RPL0
    je legal_acce

illegal_acce dd  0xdeadc0de
	; exception code in here.
	mov ax, 0x00
	mov fs, ax
	mov ax, 0x0dead
	mov word [fs:0], ax

legal_acce:
    pop ax
	ret
;=============================== ;

;name: set_up_page
; no arguments, no return values.
set_up_page:
    mov ax, page_dir_selector
	mov es, ax
	xor edi, edi
    mov eax, page_tbl_base | PG_P | PG_USU | PG_RWW
    mov ecx, 0x400
    cld

page_dir_init:
    stosd
	add eax, 0x1000
    loop page_dir_init

    mov ax, page_tbl_selector
	mov es, ax   ;!!! err.228
	xor edi, edi
	mov eax, PG_P | PG_USU | PG_RWW
	mov ecx, 0x100000 ;1024 * 1024
	cld

page_tbl_init:
    stosd
    add eax, 0x1000
	loop page_tbl_init

start_page:
    mov eax, page_dir_base
	mov cr3, eax
    mov eax, cr0
	or  eax, (0x01 << 31)
	mov cr0, eax
    retf
page_up_off    equ        set_up_page - $$

function_len   equ        $ - function_seg_start
;******************************************** 32 ********************************************;
[section .s32]
[bits 32]
code32_seg_start:
    
	mov ax, stack32_selector
	mov ss, ax
	mov esp, stack32_limit


	mov ax, data_selector
	mov ds, ax
    mov esi, OS_offset 
    mov bh, 0x0c
	mov dx, 0x1100
	
	call func_print_selector : 0
     
	mov ax, data_selector
	mov ds, ax
    mov esi, str_offset 
    mov bh, 0x0c
	mov dx, 0x1200
	
	call func_print_selector : 0    

    mov ax, tss_selector
	ltr ax

    mov ax, taska_ldt_selector
	lldt ax

    call func_setup_page_selector : 0	

	;jmp word  taska_code32_selector : 0 
	push taska_stack32_selector
	push taska_stack32_top
	push taska_code32_selector
	push 0x0000
	retf
   

code32_len  equ    $-code32_seg_start


; data segments
[section .dat]
[bits 32]
data32_start:
str_test db "k_hello world!", 0
test_len   equ $ - data32_start

str_OS   db "OS Loader!", 0

str_offset equ data32_start - $$
OS_offset  equ str_OS - $$

data32_len equ $ - data32_start

; globl stack segment .gs
[section .gs]
[bits 32]
stack32_start:
    times 4096 db 0 
stack32_len   equ $-stack32_start
stack32_limit equ stack32_len-1


; ======================================TASK_A========================================== ;

[section .taska_data32]
[bits 32]
taska_data_start:
    taska_info    db       "taska running!", 0
taska_info_offset    equ         taska_data_start - $$
taska_data32_len     equ         $ - taska_data_start


[section .taska_stack32]
[bits 32]
taska_stack_start:
    times  1024    db    0

taska_stack32_len    equ         $ - taska_stack_start
taska_stack32_top    equ         taska_stack32_len - 1

[section .taska_code32]
[bits 32]
taska_code_start:
	mov ax, taska_data32_selector
    
	;illegal
	and ax, 0x0fffc

    mov es, ax
   
    ;;want get kernel data
    ;mov edi, taska_info_offset
	;call func_acce_selector : 0

    mov ax, taska_data32_selector
    mov ds, ax
    
	mov esi, taska_info_offset
	mov bh, 0x0c
	mov dx, 0x1300
	call func_print_selector : 0

    jmp $
	;jmp code16_selector : 0

taska_code32_len    equ         $-taska_code_start

