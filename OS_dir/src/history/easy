%include "inc.asm"

init_param:
    stack_top       equ    0x7c00

org 0x9000
jmp entry_seg 

; ************************* TSS *******************************
[section .tss]
[bits 32]
tss_start:
    dd 0
	;level 0 stack information
    dd stack32_limit
    dd stack32_selector
	;level 1
    dd 0
	dd 0
	;level 2
	dd 0
	dd 0

    ;register
	times 4*18 dd 0
	; ... ...
	dw 0
	dw $ - tss_start + 2
	;end tss struct flag
	db 0xff

tss_len    equ         $ - tss_start

; [section .gdt] start
[section .gdt]
; GDT_TAB                  start_addr     limit_addr         seg_property
GDT_ENTRY:    Descriptor      0,             0,                    0
CODE32_DESC:  Descriptor      0,           0xffff,      DA_C | DA_32 | DA_DPL3
VIDEO_DESC:   Descriptor   0xB8000,       0x07FFF,            DA_DRWA | DA_32 | DA_DPL3
DATA32_DESC:  Descriptor      0,         data32_len-1,        DA_DRW  | DA_32 | DA_DPL3
STACK32_DESC: Descriptor      0,         stack32_limit,       DA_DRW | DA_32 | DA_DPL0
U_STACK32_DESC: Descriptor   0,        u_stack32_limit,       DA_DRW | DA_32 | DA_DPL3
;Tss_descriptor
;tss
TSS_DESC:     Descriptor      0,         tss_len - 1,         DA_386TSS | DA_DPL0

KERNEL32_DESC  Descriptor    0,         kernel32_len - 1,     DA_C  | DA_32 | DA_DPL0
GDT_LEN   equ      $ - GDT_ENTRY

;===========================================================================================================GDT end;

GDT_PTR: 
    dw GDT_LEN-1    ; gdt_max_offset
	dd  0           ; gdt_addr 

GDT_SELECTOR:       ; first not use.
    code32_selector    equ    ( (0x0001 << 3) | SA_TIG | SA_RPL3 )
    video_selector     equ    ( (0x0002 << 3) | SA_TIG | SA_RPL3 )
	data_selector      equ    ( (0x0003 << 3) | SA_TIG | SA_RPL3 )
	stack32_selector   equ    ( (0x0004 << 3) | SA_TIG | SA_RPL0 )
	u_stack32_selector equ    ( (0x0005 << 3) | SA_TIG | SA_RPL3 )
;tss selector
    tss_selector       equ    ( (0x0006 << 3) | SA_TIG | SA_RPL0 )
    kernel32_selector  equ    ( (0x0007 << 3) | SA_TIG | SA_RPL0 )
;end of [section .gdt]

[section .idt]
align 32
;idt table 
[bits 32]
; other interrupt handle 
idt_start:
%rep 256 
    Gate      kernel32_selector,  def_handle,     0,  DA_386IGATE | DA_DPL3
%endrep
; 0x20
;int0x20:
;    Gate      kernel32_selector,  def_handle,   0,  DA_386IGATE | DA_DPL3
; 0x80
;%rep 95 
;    Gate      kernel32_selector,  def_handle,     0,  DA_386IGATE | DA_DPL3
;%endrep

;int0x80_desc: 
;    Gate      kernel32_selector,  int0x80_handle, 0,  DA_386IGATE | DA_DPL3

; other interrupt
;%rep 127
;    Gate      kernel32_selector,  def_handle,     0,  DA_386IGATE | DA_DPL3
;%endrep

idt_len  equ    $-idt_start

IDT_PTR:
    dw idt_len-1
	dd 0

; end of idt section


[section .s16]
[bits 16]
entry_seg:

mov ax, cs
mov ds, ax
mov es, ax
mov ss, ax

mov sp, stack_top

; init GDT for 32bits seg


mov esi, code32_seg_start
mov edi, CODE32_DESC
call init_descriptor_item

mov esi, stack32_start
mov edi, STACK32_DESC
call init_descriptor_item

mov esi, u_stack32_start
mov edi, U_STACK32_DESC
call init_descriptor_item

mov esi, data32_start
mov edi, DATA32_DESC
call init_descriptor_item

mov esi, tss_start
mov edi, TSS_DESC
call init_descriptor_item

mov esi, kernel32_start
mov edi, KERNEL32_DESC
call init_descriptor_item

; init gdt struct
xor eax, eax
mov ax, ds
shl ax, 4
add eax, GDT_ENTRY
mov dword [GDT_PTR + 2], eax

; init idt struct
xor eax, eax
mov ax, ds
shl ax, 4
add eax, idt_start 
mov dword [IDT_PTR + 2], eax

;1. load gdt
lgdt [GDT_PTR]

;2. cli 
cli
lidt [IDT_PTR]

; set IOPT == 3
pushf

pop eax
or eax, 0x3000
push eax

popf

;3. open A20
in al, 0x92
or al, 0x02
out 0x92, al

;protect open
mov eax, cr0
or eax, 0x01
mov cr0, eax

; start ltr
mov ax, tss_selector
ltr ax

;jmp dword code32_selector : 0
push u_stack32_selector
push u_stack32_limit
push code32_selector
push 0x0000
retf

;============ system function =============;
; name: init_descriptor_item
; code seg label   -> ESI
; descriptor label -> EDI
init_descriptor_item:
    push eax

    xor eax, eax
	mov ax, cs
    shl eax, 4
	add eax, esi

	mov word [edi + 2], ax
	shr eax, 16 
	mov byte [edi + 4], al
	
	mov byte [edi + 7], ah

    pop eax
    ret

;******************************************** 32 ********************************************;
[section .s32]
[bits 32]
code32_seg_start:
	mov ax, u_stack32_selector
	mov ss, ax
	mov esp,u_stack32_limit

    mov ax, data_selector
	mov ds, ax

    mov ax, video_selector
	mov gs, ax

    int 0x80
	jmp $

code32_len  equ     $-code32_seg_start

[section .knl]
[bits 32]
kernel32_start:

def_handle_func:
    iret
; int0x80_handle
int0x80_handle_func:
    iret

def_handle equ   def_handle_func-$$
int0x80_handle  equ     int0x80_handle_func-$$

kernel32_len  equ    $ - kernel32_start 


; data segments
[section .dat]
[bits 32]
data32_start:
    times 1024 db 0
data32_len equ $ - data32_start

; globl stack segment .gs
[section .gs]
[bits 32]
stack32_start:
    times 4096 db 0 
stack32_len   equ $-stack32_start
stack32_limit equ stack32_len-1

; user stack segment .gs
[section .ugs]
[bits 32]
u_stack32_start:
    times 4096 db 0 
u_stack32_len   equ $-u_stack32_start
u_stack32_limit equ u_stack32_len-1

